#include "Engine.h"

Engine::Engine(HINSTANCE hinstance) 
	: DXApp(hinstance)
{

}

Engine::~Engine()
{

}

bool Engine::Init()
{
	if (DXApp::Init() == false) 
		return false;

	return true;
}

void Engine::Update()
{
	RotateObject();				// 물체 회전.
}

void Engine::Render()
{
	// 색상 설정.
	/*float color[4] = { 0.0f, 0.5f, 0.5f, 1.0f };*/
	float color[4] = { 0.0f, 0.0f, 0.0f, 1.0f };

	// 화면 칠하기.
	pDeviceContext->ClearRenderTargetView(pRenderTargetView, color);

	// 정점 그리기. (Draw Call. 드로우 콜).
	//pDeviceContext->Draw(nVertices, 0);
	pDeviceContext->DrawIndexed(nIndices, 0, 0);

	// 스왑체인 교체.
	pSwapChain->Present(0, 0);
}

float rotY = 0.01f;		// 회전 각도 저장용.
float rotX = 0.01f;		// 회전 각도 저장용.
float rotZ = 0.01f;		// 회전 각도 저장용.
//float pi = 3.141592f;
float doublePI = XM_PI * 2.0f;
void Engine::RotateObject()
{
	// 프레임 마다 0.01도씩 누적.
	rotY += XMConvertToRadians(0.01f);
	rotX += XMConvertToRadians(0.01f);
	rotZ += XMConvertToRadians(0.01f);
	if (rotY >= doublePI)		// 한바퀴 돌면 0도로 설정.
		rotY = 0.0f;
	if (rotX >= doublePI)
		rotX = 0.0f;
	if (rotZ >= doublePI)
		rotZ = 0.0f;

	// 회전 행렬.
	XMMATRIX rotationX = XMMatrixRotationX(0.0f);
	XMMATRIX rotationY = XMMatrixRotationY(rotY);
	XMMATRIX rotationZ = XMMatrixRotationZ(0.0f);
	XMMATRIX rotation = rotationZ * rotationX * rotationY;

	// 이동 행렬.
	XMMATRIX translation = XMMatrixTranslation(0.0f, 0.0f, 0.0f);

	// 스케일(Scale 비례).
	XMMATRIX scale = XMMatrixScaling(1.0f, 1.0f, 1.0f);

	// 월드 행렬 갱신.
	worldMatrix = XMMatrixIdentity();
	worldMatrix = scale * rotation * translation;

	// 셰이더 상수버퍼에 전달할 데이터 설정.
	CBPerObject cbData;
	ZeroMemory(&cbData, sizeof(cbData));
	cbData.world = XMMatrixTranspose(worldMatrix);
	cbData.view = XMMatrixTranspose(viewMatrix);
	cbData.projection = XMMatrixTranspose(projectionMatrix);

	// 데이터 갱신.
	pDeviceContext->UpdateSubresource(cBuffer, 0, 0, &cbData, 0, 0);
}
